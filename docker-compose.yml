version: "3.4"

networks:
  backend:
    driver: bridge
  frontend:

services:
  # gateway
  gamestart.gateway:
    container_name: gateway
    image: ${DOCKER_REGISTRY-}gateway
    build:
      context: .
      dockerfile: GameStart.Gateway/Dockerfile
    networks:
      - backend
      - frontend
    ports:
      - 6001:443

  # Catalog service
  gamestart.catalogservice.api:
    container_name: catalog-service
    image: ${DOCKER_REGISTRY-}catalogservice
    build:
      context: .
      dockerfile: GameStart.CatalogService/GameStart.CatalogService.Api/Dockerfile
    networks:
      - backend
    depends_on:
      - gamestart.gateway
      - gamestart.identityservice.api
      - messagebus
      - redis.cache
      - elk.elasticsearch
      - catalogdb
    environment:
      - CATALOG_DB_HOST=catalogdb
      - CATALOG_DB_DATABASE=Catalog
      - CATALOG_DB_USERNAME=postgres
      - CATALOG_DB_PASSWORD=wtugJkfAbkTq5
      - IDENTITY_AUTHORITY=https://gamestart.identityservice.api
      - REDIS_CACHE_URL=redis.cache:6379
      - ELASTICSEARCH_URI=http://elk.elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=6BFjT9QJ3hpcp
  catalogdb:
    container_name: catalog-service-db
    image: postgres
    networks:
      - backend
    environment:
      - POSTGRES_DB=Catalog
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=wtugJkfAbkTq5
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d Catalog'"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s

  # Identity service
  gamestart.identityservice.api:
    container_name: identity-service
    image: ${DOCKER_REGISTRY-}identityservice
    build:
      context: .
      dockerfile: GameStart.IdentityService/GameStart.IdentityService.Api/Dockerfile
    networks:
      - backend
    ports:
      - 6002:443
      - 6003:80
    depends_on:
      - gamestart.gateway
      - messagebus
      - identitydb
    environment:
      - OUTSIDE_HOST=localhost:6002
      - IDENTITY_DB_HOST=identitydb
      - IDENTITY_DB_ACCOUNTS_DATABASE=Accounts
      - IDENTITY_DB_IS4_DATABASE=IdentityServer
      - IDENTITY_DB_USERNAME=sa
      - IDENTITY_DB_PASSWORD=Ht8R!n6HG7T2
  identitydb:
    container_name: identity-service-db
    image: mcr.microsoft.com/mssql/server
    networks:
      - backend
    ports:
      - 1445:1433
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=Ht8R!n6HG7T2
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "Ht8R!n6HG7T2" -Q "SELECT 1" || exit 1
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s

  # Ordering service
  gamestart.orderingservice.api:
    container_name: ordering-service
    image: ${DOCKER_REGISTRY-}orderingservice
    build:
      context: .
      dockerfile: GameStart.OrderingService/GameStart.OrderingService.Api/Dockerfile
    networks:
      - backend
    ports:
      - 6010:443
    depends_on:
      - gamestart.gateway
      - messagebus
      - gamestart.identityservice.api
      - ordersdb
    environment:
      - ORDERS_DB_HOST=ordersdb
      - ORDERS_DB_DATABASE=Orders
      - ORDERS_DB_USERNAME=root
      - ORDERS_DB_PASSWORD=4mG3SSUqkF7rX
      - REDIS_CACHE_URL=redis.cache:6379
      - IDENTITY_AUTHORITY=https://gamestart.identityservice.api
  ordersdb:
    container_name: ordering-service-db
    image: mysql
    networks:
      - backend
    environment:
      - MYSQL_DATABASE=Orders
      - MYSQL_ROOT_PASSWORD=4mG3SSUqkF7rX
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p", "4mG3SSUqkF7rX"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s

  # Mailing service
  gamestart.mailingservice.api:
    container_name: mailing-service
    image: ${DOCKER_REGISTRY-}mailingservice
    build:
      context: .
      dockerfile: GameStart.MailingService/GameStart.MailingService.Api/Dockerfile
    networks:
      - backend
    ports:
      - 6005:443
      - 6006:80
    depends_on:
      - gamestart.identityservice.api
      - gamestart.gateway
      - messagebus
      - hangfire-mongo
    environment: 
      - MONGO_HANGFIRE_HOST=hangfire-mongo:27017
      - MONGO_HANGFIRE_USERNAME=root
      - MONGO_HANGFIRE_PASSWORD=LxD43h4MbczRU
      - MONGO_HANGFIRE_DATABASE=hangfire
  hangfire-mongo:
    container_name: hangfire-mongo-db
    image: mongo
    networks:
      - backend
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=LxD43h4MbczRU
      - MONGO_INITDB_DATABASE=hangfire
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin -u root -p LxD43h4MbczRU --quiet | grep 1
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s

  # Files service
  gamestart.filesservice.api:
    container_name: files-service
    image: ${DOCKER_REGISTRY-}filesservice
    build:
      context: .
      dockerfile: GameStart.FilesService/GameStart.FilesService.Api/Dockerfile
    networks:
      - backend
    depends_on:
      - gamestart.identityservice.api
      - gamestart.gateway
    environment: 
      - IDENTITY_AUTHORITY=https://gamestart.identityservice.api

  # Message Bus
  messagebus:
    container_name: messagebus
    image: rabbitmq:management
    networks:
      - backend
    ports:
      - 5672:5672
      - 15672:15672
    restart: on-failure
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/mnesia/
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf

  # Redis Cache
  redis.cache:
    container_name: redis-cache
    image: redis
    networks:
      - backend
    ports:
      - 6379:6379
    environment:
      - ALLOW_EMPTY_PASSWORD=yes

  # ELK
  elk.elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:8.6.1
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - backend
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ELASTIC_PASSWORD=6BFjT9QJ3hpcp
    healthcheck:
      test: curl -u elastic:elastic -s -f elasticsearch:9200/_cat/health >/dev/null || exit 1
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s
  elk.kibana:
    container_name: kibana
    image: kibana:8.6.1
    ports:
      - 5601:5601
    networks:
      - backend
    depends_on:
      - elk.elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elk.elasticsearch:9200
  elk.logstash:
    container_name: logstash
    image: logstash:8.6.1
    ports:
      - 5044:5044
    networks:
      - backend
    depends_on:
      - elk.elasticsearch
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
