// <auto-generated />
using System;
using GameStart.CatalogService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameStart.CatalogService.Data.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    partial class CatalogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DeveloperVideoGame", b =>
                {
                    b.Property<Guid>("VideoGameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeveloperId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VideoGameId", "DeveloperId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("VideoGameId", "DeveloperId"));

                    b.HasIndex("DeveloperId");

                    b.ToTable("VideoGameDeveloper", (string)null);
                });

            modelBuilder.Entity("GameStart.CatalogService.Data.Models.Developer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Developers", (string)null);
                });

            modelBuilder.Entity("GameStart.CatalogService.Data.Models.Ganre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Ganres", (string)null);
                });

            modelBuilder.Entity("GameStart.CatalogService.Data.Models.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Languages", (string)null);
                });

            modelBuilder.Entity("GameStart.CatalogService.Data.Models.LanguageAvailability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AvailableForAudio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("AvailableForInterface")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("AvailableForSubtitles")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("LanguageId");

                    b.ToTable("LanguageAvailabilities", (string)null);
                });

            modelBuilder.Entity("GameStart.CatalogService.Data.Models.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Platforms", (string)null);
                });

            modelBuilder.Entity("GameStart.CatalogService.Data.Models.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Publishers", (string)null);
                });

            modelBuilder.Entity("GameStart.CatalogService.Data.Models.SystemRequirements", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Graphics")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Memory")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Network")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Processor")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Storage")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VideoGameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("PlatformId");

                    b.HasIndex("VideoGameId", "PlatformId")
                        .IsUnique()
                        .HasFilter("[VideoGameId] IS NOT NULL AND [PlatformId] IS NOT NULL");

                    b.ToTable("SystemRequirements", (string)null);
                });

            modelBuilder.Entity("GameStart.CatalogService.Data.Models.VideoGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Copyright")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<Guid?>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("PublisherId");

                    b.HasIndex("Title");

                    b.ToTable("VideoGames", (string)null);
                });

            modelBuilder.Entity("GanreVideoGame", b =>
                {
                    b.Property<Guid>("VideoGameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GanreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VideoGameId", "GanreId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("VideoGameId", "GanreId"));

                    b.HasIndex("GanreId");

                    b.ToTable("VideoGameGanre", (string)null);
                });

            modelBuilder.Entity("VideoGameLanguage", b =>
                {
                    b.Property<Guid>("LanguageAvailabilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VideoGameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LanguageAvailabilityId", "VideoGameId");

                    b.HasIndex("VideoGameId");

                    b.ToTable("VideoGameLanguage", (string)null);
                });

            modelBuilder.Entity("DeveloperVideoGame", b =>
                {
                    b.HasOne("GameStart.CatalogService.Data.Models.Developer", null)
                        .WithMany()
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStart.CatalogService.Data.Models.VideoGame", null)
                        .WithMany()
                        .HasForeignKey("VideoGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameStart.CatalogService.Data.Models.LanguageAvailability", b =>
                {
                    b.HasOne("GameStart.CatalogService.Data.Models.Language", "Language")
                        .WithMany("LanguageAvailabilities")
                        .HasForeignKey("LanguageId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("GameStart.CatalogService.Data.Models.SystemRequirements", b =>
                {
                    b.HasOne("GameStart.CatalogService.Data.Models.Platform", "Platform")
                        .WithMany("SystemRequirements")
                        .HasForeignKey("PlatformId");

                    b.HasOne("GameStart.CatalogService.Data.Models.VideoGame", "VideoGame")
                        .WithMany("SystemRequirements")
                        .HasForeignKey("VideoGameId");

                    b.Navigation("Platform");

                    b.Navigation("VideoGame");
                });

            modelBuilder.Entity("GameStart.CatalogService.Data.Models.VideoGame", b =>
                {
                    b.HasOne("GameStart.CatalogService.Data.Models.Publisher", "Publisher")
                        .WithMany("VideoGames")
                        .HasForeignKey("PublisherId");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GanreVideoGame", b =>
                {
                    b.HasOne("GameStart.CatalogService.Data.Models.Ganre", null)
                        .WithMany()
                        .HasForeignKey("GanreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStart.CatalogService.Data.Models.VideoGame", null)
                        .WithMany()
                        .HasForeignKey("VideoGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VideoGameLanguage", b =>
                {
                    b.HasOne("GameStart.CatalogService.Data.Models.LanguageAvailability", null)
                        .WithMany()
                        .HasForeignKey("LanguageAvailabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStart.CatalogService.Data.Models.VideoGame", null)
                        .WithMany()
                        .HasForeignKey("VideoGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameStart.CatalogService.Data.Models.Language", b =>
                {
                    b.Navigation("LanguageAvailabilities");
                });

            modelBuilder.Entity("GameStart.CatalogService.Data.Models.Platform", b =>
                {
                    b.Navigation("SystemRequirements");
                });

            modelBuilder.Entity("GameStart.CatalogService.Data.Models.Publisher", b =>
                {
                    b.Navigation("VideoGames");
                });

            modelBuilder.Entity("GameStart.CatalogService.Data.Models.VideoGame", b =>
                {
                    b.Navigation("SystemRequirements");
                });
#pragma warning restore 612, 618
        }
    }
}
